// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: parkinglot.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ParkingLotService_ParkVehicle_FullMethodName       = "/parking_lot_system.ParkingLotService/ParkVehicle"
	ParkingLotService_RemoveVehicle_FullMethodName     = "/parking_lot_system.ParkingLotService/RemoveVehicle"
	ParkingLotService_GetAvailableSpots_FullMethodName = "/parking_lot_system.ParkingLotService/GetAvailableSpots"
)

// ParkingLotServiceClient is the client API for ParkingLotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for Parking Lot operations
type ParkingLotServiceClient interface {
	// Park a vehicle in the parking lot
	ParkVehicle(ctx context.Context, in *ParkVehicleRequest, opts ...grpc.CallOption) (*ParkVehicleResponse, error)
	// Remove a vehicle from the parking lot
	RemoveVehicle(ctx context.Context, in *RemoveVehicleRequest, opts ...grpc.CallOption) (*RemoveVehicleResponse, error)
	// Get the number of available parking spots
	GetAvailableSpots(ctx context.Context, in *GetAvailableSpotsRequest, opts ...grpc.CallOption) (*GetAvailableSpotsResponse, error)
}

type parkingLotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingLotServiceClient(cc grpc.ClientConnInterface) ParkingLotServiceClient {
	return &parkingLotServiceClient{cc}
}

func (c *parkingLotServiceClient) ParkVehicle(ctx context.Context, in *ParkVehicleRequest, opts ...grpc.CallOption) (*ParkVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkVehicleResponse)
	err := c.cc.Invoke(ctx, ParkingLotService_ParkVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingLotServiceClient) RemoveVehicle(ctx context.Context, in *RemoveVehicleRequest, opts ...grpc.CallOption) (*RemoveVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveVehicleResponse)
	err := c.cc.Invoke(ctx, ParkingLotService_RemoveVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingLotServiceClient) GetAvailableSpots(ctx context.Context, in *GetAvailableSpotsRequest, opts ...grpc.CallOption) (*GetAvailableSpotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableSpotsResponse)
	err := c.cc.Invoke(ctx, ParkingLotService_GetAvailableSpots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingLotServiceServer is the server API for ParkingLotService service.
// All implementations must embed UnimplementedParkingLotServiceServer
// for forward compatibility
//
// Service definition for Parking Lot operations
type ParkingLotServiceServer interface {
	// Park a vehicle in the parking lot
	ParkVehicle(context.Context, *ParkVehicleRequest) (*ParkVehicleResponse, error)
	// Remove a vehicle from the parking lot
	RemoveVehicle(context.Context, *RemoveVehicleRequest) (*RemoveVehicleResponse, error)
	// Get the number of available parking spots
	GetAvailableSpots(context.Context, *GetAvailableSpotsRequest) (*GetAvailableSpotsResponse, error)
	mustEmbedUnimplementedParkingLotServiceServer()
}

// UnimplementedParkingLotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParkingLotServiceServer struct {
}

func (UnimplementedParkingLotServiceServer) ParkVehicle(context.Context, *ParkVehicleRequest) (*ParkVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkVehicle not implemented")
}
func (UnimplementedParkingLotServiceServer) RemoveVehicle(context.Context, *RemoveVehicleRequest) (*RemoveVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVehicle not implemented")
}
func (UnimplementedParkingLotServiceServer) GetAvailableSpots(context.Context, *GetAvailableSpotsRequest) (*GetAvailableSpotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableSpots not implemented")
}
func (UnimplementedParkingLotServiceServer) mustEmbedUnimplementedParkingLotServiceServer() {}

// UnsafeParkingLotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingLotServiceServer will
// result in compilation errors.
type UnsafeParkingLotServiceServer interface {
	mustEmbedUnimplementedParkingLotServiceServer()
}

func RegisterParkingLotServiceServer(s grpc.ServiceRegistrar, srv ParkingLotServiceServer) {
	s.RegisterService(&ParkingLotService_ServiceDesc, srv)
}

func _ParkingLotService_ParkVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingLotServiceServer).ParkVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingLotService_ParkVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingLotServiceServer).ParkVehicle(ctx, req.(*ParkVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingLotService_RemoveVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingLotServiceServer).RemoveVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingLotService_RemoveVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingLotServiceServer).RemoveVehicle(ctx, req.(*RemoveVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingLotService_GetAvailableSpots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableSpotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingLotServiceServer).GetAvailableSpots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingLotService_GetAvailableSpots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingLotServiceServer).GetAvailableSpots(ctx, req.(*GetAvailableSpotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkingLotService_ServiceDesc is the grpc.ServiceDesc for ParkingLotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkingLotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parking_lot_system.ParkingLotService",
	HandlerType: (*ParkingLotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParkVehicle",
			Handler:    _ParkingLotService_ParkVehicle_Handler,
		},
		{
			MethodName: "RemoveVehicle",
			Handler:    _ParkingLotService_RemoveVehicle_Handler,
		},
		{
			MethodName: "GetAvailableSpots",
			Handler:    _ParkingLotService_GetAvailableSpots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parkinglot.proto",
}
