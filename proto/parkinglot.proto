syntax = "proto3";

package parkinglot;
option go_package = "parkinglot";

// Service definition for Parking Lot operations
service ParkingLotService {
 
  // Park a vehicle in the parking lot
  rpc ParkVehicle(ParkVehicleRequest) returns (ParkVehicleResponse);
 
  // Remove a vehicle from the parking lot
  rpc RemoveVehicle(RemoveVehicleRequest) returns (RemoveVehicleResponse);
 
  // Get the number of available parking spots
  rpc GetAvailableSpots(GetAvailableSpotsRequest) returns (GetAvailableSpotsResponse);
}

// Message representing a vehicle
message Vehicle {
  string license_plate = 1; // License plate of the vehicle
  string vehicle_type = 2;  // Type of the vehicle (e.g., car, bike)
}

// Request message for parking a vehicle
message ParkVehicleRequest {
  Vehicle vehicle = 1; // Vehicle to be parked
}

// Response message for parking a vehicle
message ParkVehicleResponse {
  bool success = 1; // Indicates if the parking was successful
  string message = 2; // Additional message or error description
}

// Request message for removing a vehicle
message RemoveVehicleRequest {
  string license_plate = 1; // License plate of the vehicle to be removed
}

// Response message for removing a vehicle
message RemoveVehicleResponse {
  bool success = 1; // Indicates if the removal was successful
  string message = 2; // Additional message or error description
}

// Request message for getting available spots
message GetAvailableSpotsRequest {}

// Response message for getting available spots
message GetAvailableSpotsResponse {
  int32 available_spots = 1; // Number of available parking spots
}